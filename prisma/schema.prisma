generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  image            String?
  password         String
  role             Role             @default(SUPPLIER)
  category         String?
  inn              String?
  supplierName     String?
  status           UserStatus       @default(ACTIVE)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  accounts         Account[]
  bookingRequests  BookingRequest[]
  supplierBookings BookingRequest[] @relation("BookingSupplier")
  sessions         Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Zone {
  id                String     @id @default(cuid())
  uniqueIdentifier  String     @unique
  region            String?
  city              String
  number            String
  market            String
  newFormat         String
  equipmentFormat   String?
  equipment         String
  price             Float?
  externalId        String?
  dimensions        String
  mainMacrozone     String
  adjacentMacrozone String
  sector            String?
  km                String?
  dmpNeighborhood   String?
  purpose           String?
  subpurpose        String?
  status            ZoneStatus
  supplier          String?
  brand             String?
  category          String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  bookings          Booking[]
}

model BookingRequest {
  id         String        @id @default(cuid())
  userId     String
  status     RequestStatus
  category   String?
  supplierId String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  bookings   Booking[]
  user       User          @relation(fields: [userId], references: [id])
  supplier   User?         @relation("BookingSupplier", fields: [supplierId], references: [id])
}

model Booking {
  id               String         @id @default(cuid())
  bookingRequestId String
  zoneId           String
  status           BookingStatus
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  bookingRequest   BookingRequest @relation(fields: [bookingRequestId], references: [id], onDelete: Cascade)
  zone             Zone           @relation(fields: [zoneId], references: [id])
}

enum RequestStatus {
  NEW
  CLOSED
}

enum Role {
  SUPPLIER
  CATEGORY_MANAGER
  DMP_MANAGER
}

enum ZoneStatus {
  AVAILABLE
  BOOKED
  UNAVAILABLE
}

enum BookingStatus {
  PENDING_KM
  KM_APPROVED
  KM_REJECTED
  DMP_APPROVED
  DMP_REJECTED
}

enum UserStatus {
  PENDING
  ACTIVE
  REJECTED
}

model InnOrganization {
  id        String   @id @default(cuid())
  inn       String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
